
/*
Covid 19 Data Exploration 
Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types
*/

Select *
From portfolioproject..CovidDeaths
Where continent IS NOT NULL;


-- Select Data that we are going to be starting with

Select  location, 
	date, 
	total_cases, 
	new_cases, 
	total_deaths, 
	population
From PortfolioProject..CovidDeaths
Where continent is not null 
order by 1,2




-- Total cases VS Total deaths in percentage, in each country

Select  location, 
		date, 
		total_cases, 
		total_deaths, 
		(total_deaths/total_cases )*100 AS case_vs_death_percentage
From portfolioproject..CovidDeaths
Where continent IS NOT NULL
order by 1, 2;




-- Total cases VS Total deaths in percentage, in the UK
-- The likelihood of dying if you contract covid in the UK

Select  location, 
		date, 
		total_cases, 
		total_deaths, 
		(total_deaths/total_cases )*100 AS case_vs_death_percentage
From portfolioproject..CovidDeaths
Where location like '%UNITED K%'
AND continent IS NOT NULL
order by 1, 2;





-- Total cases VS Population
-- Shows the percentage of population infected by covid

Select  location, 
		date, 
		total_cases, 
		population, 
		(total_cases/population )*100 AS case_vs_population_percentage
From portfolioproject..CovidDeaths
Where continent IS NOT NULL
order by 1, 2;





-- Shows Countries with highest infection rate compared to population size

Select  location, 
		population,
		MAX(total_cases) AS highest_infection_rate,
		MAX((total_cases/population ))*100 AS case_vs_population_percentage
From portfolioproject..CovidDeaths
Where continent IS NOT NULL
Group by location, population
order by case_vs_population_percentage DESC, highest_infection_rate DESC;




-- Shows Countries with highest death rate compared to population size

Select  location, 
		population,
		MAX(cast(total_deaths as int)) AS highest_death_rate,
		MAX(cast(total_deaths as int)/population )*100 AS case_vs_death_percentage
From portfolioproject..CovidDeaths
where continent IS NOT NULL
Group by location, population
order by case_vs_death_percentage DESC, highest_death_rate  DESC;






-- Total death count per continent 

Select  continent, 
		SUM(cast(total_deaths as int)) AS total_death_count	
From portfolioproject..CovidDeaths
where continent IS NOT NULL
Group by continent
order by total_death_count  DESC;





-- Global numbers 

Select  SUM(new_cases) AS total_new_cases,
		SUM(cast(new_deaths as int)) AS total_new_deaths,
		SUM(cast(new_deaths as int))/SUM(new_cases) *100 AS death_percentage
From portfolioproject..CovidDeaths
where continent IS NOT NULL;



-- Global numbers per date

Select  date,		
		SUM(new_cases) AS total_new_cases,
		SUM(cast(new_deaths as int)) AS total_new_deaths,
		SUM(cast(new_deaths as int))/SUM(new_cases) *100 AS death_percentage
From portfolioproject..CovidDeaths
where continent IS NOT NULL
Group by date
order by date; 




-- Total Population Vs vaccination 
-- Shows Percentage of Population that has recieved at least one Covid Vaccine

Select  d.continent,
		d.location,
		d.date,
		d.population,
		v.new_vaccinations
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL
order by 1, 2, 3; 








-- Population, vaccination info with total_vaccination of each location along side

Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location) AS total_vaccinaiton
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL
Order by 2;






-- Population, vaccination info with total_vaccination up to that specific date

Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location order by d.location, d.date) AS rolling_count_total_vaccination
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL
Order by 2, 3; 



-- Total population Vs Vaccination using CTE

WITH rolling_count(continent,location, date,population,new_vaccinations,rolling_count_total_vaccination) 
AS (Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location order by d.location, d.date) AS rolling_count_total_vaccination
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL)

SELECT  *,
		(rolling_count_total_vaccination/population)*100 AS population_vs_vaccination
From rolling_count
Order by 2, 3; 





-- Total population Vs Vaccination using inline view

Select  *,
		(rolling_count_total_vaccination/population)*100 AS population_vs_vaccination
From (Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location order by d.location, d.date) AS rolling_count_total_vaccination
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL) AS temp
Order by location, date; 





-- Total population Vs Vaccination using temp table

DROP TABLE IF EXISTS #PercentPopulationVaccinated
Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location order by d.location, d.date) AS rolling_count_total_vaccination
INTO #PercentPopulationVaccinated

From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL;

SELECT   *,
		(rolling_count_total_vaccination/population)*100 AS population_vs_vaccination
FROM #PercentPopulationVaccinated
Order by location, date; 




-- Create view to store data for later visualization  

CREATE VIEW population_vs_vaccinated AS 
Select  d.continent,
		d.location,
		d.date,
		d.population,
		new_vaccinations,
		SUM(CAST(new_vaccinations AS FLOAT)) OVER (PARTITION BY d.location order by d.location, d.date) AS rolling_count_total_vaccination
From portfolioproject..CovidDeaths d
JOIN portfolioproject..CovidVaccinations v
ON (d.location = v.location AND d.date = v.date)
where d.continent IS NOT NULL; 




-- Select from the view

SELECT *
FROM population_vs_vaccinated;
